import Head from "next/head";
import React, { useEffect, useState } from "react";
import Navbar from "../components/Navbar";
import styles from "../styles/Home.module.css";
import { initFirebase, storage } from "../config/firebaseConfig";
import {
  getAuth,
  onAuthStateChanged,
  updateEmail,
  updateProfile,
  updatePassword,
} from "firebase/auth";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { useRouter } from "next/router";

initFirebase;
const auth = getAuth();

const Profile = () => {
  const [imageUpload, setImageUpload] = useState(null);
  const [active, setActive] = useState(false);
  const [loadingReset, setLoadingReset] = useState(false);
  const [loadingUpdate, setLoadingUpdate] = useState(false);
  const [displayImage, setDisplayImage] = useState("");
  const [displayName, setDisplayName] = useState("");
  const [email, setEmail] = useState("");
  const [updateProfileNotification, setUpdateProfileNotification] =
    useState("");
  const [resetPassword, setResetPassword] = useState(false);
  const [
    updateProfileSuccessNotification,
    setUpdateProfileSuccessNotification,
  ] = useState(false);
  const [updateProfileErrorNotification, setUpdateProfileErrorNotification] =
    useState(false);

  const router = useRouter();

  useEffect(() => {
    onAuthStateChanged(auth, (user) => {
      if (user) {
        setDisplayImage(user.photoURL);
        setDisplayName(user.displayName);
        setEmail(user.email);
      } else {
        router.push("/login");
      }
    });
    setTimeout(() => {
      setUpdateProfileSuccessNotification(false);
      setUpdateProfileErrorNotification(false);
    }, 3000);
  }, [
    onAuthStateChanged,
    updateProfileSuccessNotification,
    updateProfileErrorNotification,
  ]);

  const handleResetPassword = async (event) => {
    setLoadingReset(true);
    event.preventDefault();
    const newPassword = event.target.password.value;

    updatePassword(auth.currentUser, newPassword)
      .then(() => {
        console.log("Update password success");
        setUpdateProfileNotification("Password anda telah diganti");
        setUpdateProfileSuccessNotification(true);
        setResetPassword(false);
      })
      .catch((error) => {
        console.log(error.message);
        setUpdateProfileNotification(error.message);
        setUpdateProfileErrorNotification(true);
      });

    setLoadingReset(false);
  };

  const handleUpdateProfile = async (event) => {
    setLoadingUpdate(true);
    event.preventDefault();

    try {
      await updateEmail(auth.currentUser, email);
      await updateProfile(auth.currentUser, { displayName: displayName });
      if (imageUpload != null) {
        const imageRef = ref(storage, `userImage/${auth.currentUser.email}`);
        await uploadBytes(imageRef, imageUpload);
        const url = await getDownloadURL(imageRef);
        await updateProfile(auth.currentUser, { photoURL: url });
      }
      setUpdateProfileSuccessNotification(true);
      setUpdateProfileNotification("Berhasil mengubah profil");
      setEmail(auth.currentUser.email);
      setDisplayName(auth.currentUser.displayName);
      setActive(false);
    } catch (error) {
      setUpdateProfileErrorNotification(true);
      setUpdateProfileNotification("Gagal mengubah profil");
    }

    setLoadingUpdate(false);
  };

  return (
    <>
      <Head>
        <title>My Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <div className={styles.container}>
        <div className="mt-5 mb-5">
          <div className="mb-10">
            <h1 className="text-4xl font-bold text-center">My Profile</h1>
          </div>
          <form onSubmit={handleUpdateProfile}>
            <div className="flex flex-col justify-center items-center md:flex-row md:justify-center">
              <div className="md:mx-10">
                <div className="flex flex-col justify-center items-center">
                  <img
                    src={displayImage}
                    alt=""
                    className="w-[200px] h-[200px] rounded-full mb-3 sm:mb-0 object-cover"
                  />
                  {active ? (
                    <div className="flex justify-center mb-7 md:mb-0 w-[205px]">
                      <input
                        type="file"
                        className="mt-3"
                        onChange={(event) => {
                          setImageUpload(event.target.files[0]);
                        }}
                      />
                    </div>
                  ) : (
                    <></>
                  )}
                </div>
              </div>
              <div className="w-5/6 sm:w-1/3 flex flex-col justify-center items-center">
                <div className="w-full flex justify-center">
                  <div className="mt-4 sm:mt-0 flex justify-start">
                    <div>
                      <div className="w-full">
                        <h1 className="text-xl font-bold">Nama</h1>
                      </div>
                      <div className="mt-2">
                        {!active ? (
                          <h1 className="w-60 bg-white border-2 border-white pl-2 pr-10 py-4 rounded-md">
                            {displayName}
                          </h1>
                        ) : (
                          <input
                            className="w-60 bg-gray-100 border-2 border-gray-600 pl-2 pr-10 py-4 rounded-md"
                            type="name"
                            value={displayName}
                            name="name"
                            onChange={(e) => setDisplayName(e.target.value)}
                          />
                        )}
                      </div>
                    </div>
                  </div>
                </div>
                <div className="w-full flex justify-center">
                  <div className="mt-4 flex justify-start">
                    <div>
                      <div className="w-full">
                        <h1 className="text-xl font-bold">Email</h1>
                      </div>
                      <div className="mt-2">
                        {!active ? (
                          <h1 className="w-60 bg-white border-2 border-white pl-2 pr-10 py-4 rounded-md">
                            {email}
                          </h1>
                        ) : (
                          <input
                            className="w-60 bg-gray-100 border-2 border-gray-600 pl-2 pr-10 py-4 rounded-md"
                            type="text"
                            value={email}
                            name="email"
                            onChange={(e) => setEmail(e.target.value)}
                          />
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className="w-full mt-10 flex justify-between sm:justify-center">
              {active ? (
                <div>
                  <button
                    type="submit"
                    className="w-36 bg-green-600 text-white hover:bg-green-700 mx-2 px-4 py-3 rounded-full"
                  >
                    {loadingUpdate ? "Loading..." : "Save Profile"}
                  </button>
                </div>
              ) : (
                <></>
              )}
              <div>
                {!active && !resetPassword ? (
                  <button
                    onClick={() => setActive(!active)}
                    className="w-36 bg-green-600 text-white hover:bg-green-700 mx-2 px-2 py-3 rounded-full"
                  >
                    Edit Profile
                  </button>
                ) : (
                  <></>
                )}
              </div>
              {!active ? (
                !resetPassword ? (
                  <div>
                    <button
                      onClick={() => setResetPassword(true)}
                      className="w-36 bg-red-600 text-white hover:bg-red-700 mx-2 px-2 py-3 rounded-full"
                    >
                      Reset Password
                    </button>
                  </div>
                ) : (
                  <></>
                )
              ) : (
                <button
                  onClick={() => setActive(false)}
                  className="w-36 bg-gray-600 text-white hover:bg-gray-700 mx-2 px-4 py-3 rounded-full"
                >
                  Cancel
                </button>
              )}
            </div>
          </form>
          {resetPassword ? (
            <div className="flex justify-center mt-5">
              <div className="flex flex-col justify-center items-center">
                <div className="mb-2">
                  <h1>Masukkan password baru anda</h1>
                </div>
                <div>
                  <form onSubmit={handleResetPassword}>
                    <div className="flex justify-center mb-5">
                      <input
                        className="w-60 bg-gray-100 border-2 border-gray-600 pl-2 pr-10 py-4 rounded-md"
                        type="password"
                        name="password"
                        id="password"
                        required
                      />
                    </div>
                    <div className="flex justify-center">
                      <button
                        type="submit"
                        className="w-36 bg-red-600 text-white hover:bg-red-700 mx-2 px-4 py-3 rounded-full"
                      >
                        {loadingReset ? "Loading..." : "Reset Password"}
                      </button>
                      <button
                        onClick={() => setResetPassword(false)}
                        className="w-36 bg-gray-600 text-white hover:bg-gray-700 mx-2 px-4 py-3 rounded-full"
                      >
                        Cancel
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          ) : (
            <></>
          )}

          {updateProfileSuccessNotification ? (
            <div
              className="mb-5 mt-5 bg-green-100 border border-green-400 text-green-700 pl-4 pr-10 py-3 rounded relative"
              role="alert"
            >
              <strong className="font-bold">Success! </strong>
              <span className="block sm:inline">
                {updateProfileNotification}
              </span>
              <span
                className="absolute top-0 bottom-0 right-0 px-4 py-3"
                onClick={() => setUpdateProfileSuccessNotification(false)}
              >
                <svg
                  className="fill-current h-6 w-6 text-green-500"
                  role="button"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                >
                  <title>Close</title>
                  <path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z" />
                </svg>
              </span>
            </div>
          ) : (
            <></>
          )}

          {updateProfileErrorNotification ? (
            <div
              className="mb-5 mt-5 bg-red-100 border border-red-400 text-red-700 pl-4 pr-10 py-3 rounded relative"
              role="alert"
            >
              <strong className="font-bold">Error! </strong>
              <span className="block sm:inline">
                {updateProfileNotification}
              </span>
              <span
                className="absolute top-0 bottom-0 right-0 px-4 py-3"
                onClick={() => setError(false)}
              >
                <svg
                  className="fill-current h-6 w-6 text-red-500"
                  role="button"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                >
                  <title>Close</title>
                  <path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z" />
                </svg>
              </span>
            </div>
          ) : (
            <></>
          )}
        </div>
      </div>
    </>
  );
};

export default Profile;
